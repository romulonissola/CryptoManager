// <auto-generated />
using CryptoManager.Repository.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace CryptoManager.Repository.Migrations.Entity
{
    [DbContext(typeof(EntityContext))]
    [Migration("20180507024713_UpdatingDecimalPrecision")]
    partial class UpdatingDecimalPrecision
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CryptoManager.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<long?>("FacebookId");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender");

                    b.Property<string>("LastName");

                    b.Property<string>("Locale");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PictureUrl");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("CryptoManager.Domain.Entities.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<bool>("IsEnabled");

                    b.Property<bool>("IsExcluded");

                    b.Property<string>("Name");

                    b.Property<DateTime>("RegistryDate");

                    b.Property<string>("Symbol");

                    b.HasKey("Id");

                    b.ToTable("Asset");
                });

            modelBuilder.Entity("CryptoManager.Domain.Entities.Exchange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("APIUrl");

                    b.Property<bool>("IsEnabled");

                    b.Property<bool>("IsExcluded");

                    b.Property<string>("Name");

                    b.Property<DateTime>("RegistryDate");

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.ToTable("Exchange");
                });

            modelBuilder.Entity("CryptoManager.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ApplicationUserId");

                    b.Property<Guid>("BaseAssetId");

                    b.Property<DateTime>("Date");

                    b.Property<Guid>("ExchangeId");

                    b.Property<bool>("IsEnabled");

                    b.Property<bool>("IsExcluded");

                    b.Property<Guid>("QuoteAssetId");

                    b.Property<DateTime>("RegistryDate");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BaseAssetId");

                    b.HasIndex("ExchangeId");

                    b.HasIndex("QuoteAssetId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("CryptoManager.Domain.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<Guid>("FeeAssetId");

                    b.Property<bool>("IsEnabled");

                    b.Property<bool>("IsExcluded");

                    b.Property<Guid>("OrderId");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<DateTime>("RegistryDate");

                    b.HasKey("Id");

                    b.HasIndex("FeeAssetId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("CryptoManager.Domain.Entities.Order", b =>
                {
                    b.HasOne("CryptoManager.Domain.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("Orders")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CryptoManager.Domain.Entities.Asset", "BaseAsset")
                        .WithMany("BaseOrders")
                        .HasForeignKey("BaseAssetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CryptoManager.Domain.Entities.Exchange", "Exchange")
                        .WithMany("Orders")
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CryptoManager.Domain.Entities.Asset", "QuoteAsset")
                        .WithMany("QuoteOrders")
                        .HasForeignKey("QuoteAssetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CryptoManager.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("CryptoManager.Domain.Entities.Asset", "FeeAsset")
                        .WithMany("OrderItems")
                        .HasForeignKey("FeeAssetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CryptoManager.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
